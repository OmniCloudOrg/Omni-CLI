name: Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Check if Cargo.toml version changed
        id: check
        run: |
          CURRENT_VERSION=$(grep -m1 version Cargo.toml | cut -d '"' -f2)
          git checkout HEAD^1
          PREVIOUS_VERSION=$(grep -m1 version Cargo.toml | cut -d '"' -f2)
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  create-release:
      needs: check-version
      if: needs.check-version.outputs.should_release == 'true'
      runs-on: ubuntu-latest
      permissions:
        contents: write
      outputs:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
      steps:
        - uses: actions/checkout@v3

        - name: Create Release
          id: create_release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          uses: softprops/action-gh-release@v1
          with:
            tag_name: v${{ needs.check-version.outputs.version }}
            name: Release v${{ needs.check-version.outputs.version }}
            draft: false
            prerelease: false

  build-release:
    needs: [check-version, create-release]
    if: needs.check-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false  # Continue with other builds if one fails
      matrix:
        include:
          # Standard platforms (dynamically linked)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_path: target/x86_64-unknown-linux-gnu/release/omni
            asset_name: omni-linux-x86_64
          
          # Windows builds
          - os: windows-latest 
            target: x86_64-pc-windows-msvc
            bin_path: target/x86_64-pc-windows-msvc/release/omni.exe
            asset_name: omni-windows-x86_64.exe
          - os: windows-latest
            target: i686-pc-windows-msvc
            bin_path: target/i686-pc-windows-msvc/release/omni.exe
            asset_name: omni-windows-i686.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            bin_path: target/aarch64-pc-windows-msvc/release/omni.exe
            asset_name: omni-windows-arm64.exe
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_path: target/x86_64-apple-darwin/release/omni
            asset_name: omni-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_path: target/aarch64-apple-darwin/release/omni
            asset_name: omni-macos-arm64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      # Install OpenSSL for macOS
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install openssl@1.1
          echo "OPENSSL_DIR=$(brew --prefix openssl@1.1)" >> $GITHUB_ENV
      
      # Install OpenSSL for Linux
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      
      # Build using cargo for native targets
      - name: Build native
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Generate SHA256
        shell: bash
        run: |
          binary_path="${{ matrix.bin_path }}"
          
          if [ ! -f "$binary_path" ]; then
            echo "Binary not found at $binary_path"
            # Try to list outputs for debugging
            find target -name omni -o -name omni.exe -o -name "*.wasm" | sort
            exit 1
          fi
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            sha256sum "$binary_path" > "$binary_path.sha256"
          else
            shasum -a 256 "$binary_path" > "$binary_path.sha256"
          fi

      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.bin_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

      - name: Upload SHA256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.bin_path }}.sha256
          asset_name: ${{ matrix.asset_name }}.sha256
          asset_content_type: text/plain

  # Use Docker for more complex builds that need specific environments
  docker-builds:
    needs: [check-version, create-release]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Static Linux builds using Docker
          - target: x86_64-unknown-linux-musl
            bin_name: omni
            asset_name: omni-linux-x86_64-static
            docker_image: clux/muslrust:stable
            setup: |
              apt-get update && apt-get install -y pkg-config musl-dev
            command: cargo build --release --target x86_64-unknown-linux-musl
          
          # ARM64 Linux builds
          - target: aarch64-unknown-linux-gnu
            bin_name: omni
            asset_name: omni-linux-arm64
            docker_image: messense/rust-musl-cross:aarch64-musl
            setup: |
              apt-get update && apt-get install -y pkg-config libssl-dev musl-dev
              echo 'OPENSSL_STATIC=1' >> $CARGO_HOME/config.toml
              echo 'OPENSSL_DIR=/usr/include/openssl' >> $CARGO_HOME/config.toml
            command: cargo build --release --target aarch64-unknown-linux-musl
          
          # ARM64 static Linux builds
          - target: aarch64-unknown-linux-musl
            bin_name: omni
            asset_name: omni-linux-arm64-static
            docker_image: messense/rust-musl-cross:aarch64-musl
            setup: |
              apt-get update && apt-get install -y pkg-config libssl-dev musl-dev
              echo 'OPENSSL_STATIC=1' >> $CARGO_HOME/config.toml
            command: |
              # Add vendored-openssl feature if available
              if grep -q "openssl-sys" Cargo.toml; then
                RUSTFLAGS="-C target-feature=+crt-static" PKG_CONFIG_ALLOW_CROSS=1 cargo build --release --features vendored-openssl --target aarch64-unknown-linux-musl
              else
                RUSTFLAGS="-C target-feature=+crt-static" PKG_CONFIG_ALLOW_CROSS=1 cargo build --release --target aarch64-unknown-linux-musl
              fi
          
          # 32-bit Linux
          - target: i686-unknown-linux-musl
            bin_name: omni
            asset_name: omni-linux-i686-static
            docker_image: messense/rust-musl-cross:i686-musl
            setup: |
              apt-get update && apt-get install -y pkg-config libssl-dev musl-dev
              echo 'OPENSSL_STATIC=1' >> $CARGO_HOME/config.toml
            command: |
              # Add vendored-openssl feature if available
              if grep -q "openssl-sys" Cargo.toml; then
                RUSTFLAGS="-C target-feature=+crt-static" PKG_CONFIG_ALLOW_CROSS=1 cargo build --release --features vendored-openssl --target i686-unknown-linux-musl
              else
                RUSTFLAGS="-C target-feature=+crt-static" PKG_CONFIG_ALLOW_CROSS=1 cargo build --release --target i686-unknown-linux-musl
              fi
          
          # ARMv7 (32-bit ARM for Raspberry Pi)
          - target: armv7-unknown-linux-musleabihf
            bin_name: omni
            asset_name: omni-linux-armv7-static
            docker_image: messense/rust-musl-cross:armv7-musleabihf
            setup: |
              apt-get update && apt-get install -y pkg-config libssl-dev musl-dev
              echo 'OPENSSL_STATIC=1' >> $CARGO_HOME/config.toml
            command: |
              # Add vendored-openssl feature if available
              if grep -q "openssl-sys" Cargo.toml; then
                RUSTFLAGS="-C target-feature=+crt-static" PKG_CONFIG_ALLOW_CROSS=1 cargo build --release --features vendored-openssl --target armv7-unknown-linux-musleabihf
              else
                RUSTFLAGS="-C target-feature=+crt-static" PKG_CONFIG_ALLOW_CROSS=1 cargo build --release --target armv7-unknown-linux-musleabihf
              fi
          
          # Android
          - target: aarch64-linux-android
            bin_name: omni
            asset_name: omni-android-arm64
            docker_image: rust:latest
            setup: |
              apt-get update && apt-get install -y pkg-config libssl-dev openjdk-11-jdk
              rustup target add aarch64-linux-android
              cargo install cargo-ndk
            command: cargo ndk --target aarch64-linux-android build --release
          
          # WebAssembly
          - target: wasm32-unknown-unknown
            bin_name: omni.wasm
            asset_name: omni.wasm
            docker_image: rust:latest
            setup: |
              apt-get update && apt-get install -y pkg-config
              rustup target add wasm32-unknown-unknown
            command: cargo build --release --target wasm32-unknown-unknown

    steps:
      - uses: actions/checkout@v3
      
      # Check if we need to add vendored-openssl feature to Cargo.toml
      - name: Update Cargo.toml for OpenSSL vendoring if needed
        run: |
          if grep -q "openssl-sys" Cargo.toml; then
            if ! grep -q "vendored-openssl" Cargo.toml; then
              # Add vendored-openssl feature to openssl-sys
              if grep -q "\[features\]" Cargo.toml; then
                sed -i '/\[features\]/a vendored-openssl = ["openssl-sys/vendored"]' Cargo.toml
              else
                echo -e "\n[features]\nvendored-openssl = [\"openssl-sys/vendored\"]" >> Cargo.toml
              fi
              echo "Added vendored-openssl feature to Cargo.toml"
            else
              echo "vendored-openssl feature already exists in Cargo.toml"
            fi
          else
            echo "No openssl-sys dependency found in Cargo.toml, skipping vendored feature addition"
          fi
          cat Cargo.toml

      - name: Build in Docker
        run: |
          docker run --rm -v $(pwd):/project -w /project ${{ matrix.docker_image }} sh -c "
            set -e
            # Setup dependencies
            ${{ matrix.setup }}
            
            # Build
            ${{ matrix.command }}
            
            # Debug output
            echo 'Build completed, checking for binary...'
            find target -name ${{ matrix.bin_name }} | sort
          "
      
      - name: Prepare Binary
        run: |
          # Create the output directory
          mkdir -p output
          
          # Find and copy the binary
          if [[ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]]; then
            cp target/wasm32-unknown-unknown/release/${{ matrix.bin_name }} output/
          elif [[ "${{ matrix.target }}" == *"android"* ]]; then
            cp target/aarch64-linux-android/release/${{ matrix.bin_name }} output/
          else
            cp target/${{ matrix.target }}/release/${{ matrix.bin_name }} output/
          fi
          
          # Generate SHA256
          cd output
          sha256sum ${{ matrix.bin_name }} > ${{ matrix.bin_name }}.sha256
      
      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: output/${{ matrix.bin_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
      
      - name: Upload SHA256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: output/${{ matrix.bin_name }}.sha256
          asset_name: ${{ matrix.asset_name }}.sha256
          asset_content_type: text/plain
